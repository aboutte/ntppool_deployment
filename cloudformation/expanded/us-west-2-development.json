{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation to deploy a front end website",
  "Parameters": {
    "Environment": {
      "Description": "What environment to deploy the application into",
      "Type": "String",
      "Default": "development",
      "AllowedValues": [
        "development",
        "production"
      ],
      "ConstraintDescription": "must be a valid environment."
    },
    "Application": {
      "Description": "What application to deploy",
      "Type": "String",
      "AllowedValues": [
        "wordpress",
        "drupal"
      ],
      "Default": "wordpress",
      "ConstraintDescription": "Must be a valid CMS."
    },
    "Hostname": {
      "Description": "What Hostname should be used?",
      "Type": "String",
      "Default": "dev.wordpress.andyboutte.com"
    },
    "DBRootPassword": {
      "Description": "What password to use for DB root user?",
      "Type": "String",
      "NoEcho": true,
      "MinLength": "10",
      "MaxLength": "20",
      "AllowedPattern": "[a-zA-Z0-9]*",
      "Default": "3wZqvWddoT3D339uFEQW"
    },
    "DBCMSPassword": {
      "Description": "What password to use for DB cms user?",
      "Type": "String",
      "NoEcho": true,
      "MinLength": "10",
      "MaxLength": "20",
      "AllowedPattern": "[a-zA-Z0-9]*",
      "Default": "Zrx46g7fyicdUf9Nh4mj"
    },
    "CMSAdminPassword": {
      "Description": "What password to use for cms admin user?",
      "Type": "String",
      "NoEcho": true,
      "MinLength": "10",
      "MaxLength": "20",
      "AllowedPattern": "[a-zA-Z0-9]*",
      "Default": "4NrLdvm26ANo7mt2shWr"
    },
    "CMSAdminEmail": {
      "Description": "What email address to use for the cms admin user?",
      "Type": "String",
      "NoEcho": true,
      "Default": "andyboutte@mac.com"
    },
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern": "[-_ a-zA-Z0-9]*",
      "Default": "aboutte",
      "ConstraintDescription": "can contain only alphanumeric characters, spaces, dashes and underscores."
    },
    "SSHLocation": {
      "Description": "Lockdown SSH access",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "138.229.191.46/32",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x."
    },
    "FrontendInstanceType": {
      "Description": "Frontend Server EC2 instance type",
      "Type": "String",
      "Default": "t2.small",
      "AllowedValues": [
        "t1.micro",
        "t2.small",
        "m1.small",
        "m1.medium",
        "m1.large",
        "m1.xlarge",
        "m2.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "m3.xlarge",
        "m3.2xlarge",
        "c1.medium",
        "c1.xlarge",
        "cc2.8xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "Tags": [
          {
            "Key": "Name",
            "Value": "development"
          }
        ]
      }
    },
    "PublicSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "10.0.0.0/24",
        "Tags": [
          {
            "Key": "Name",
            "Value": "public"
          }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "public"
          }
        ]
      }
    },
    "GatewayToInternet": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "public"
          }
        ]
      }
    },
    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "GatewayToInternet",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },
    "PublicNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "public"
          }
        ]
      }
    },
    "InboundHTTPPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "80",
          "To": "80"
        }
      }
    },
    "InboundHTTPSPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "101",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "443",
          "To": "443"
        }
      }
    },
    "InboundSSHPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "102",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": {
          "Ref": "SSHLocation"
        },
        "PortRange": {
          "From": "22",
          "To": "22"
        }
      }
    },
    "InboundEmphemeralPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "103",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "1024",
          "To": "65535"
        }
      }
    },
    "OutboundPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "PublicSubnetNetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet"
        },
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        }
      }
    },
    "PrivateSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "10.0.1.0/24",
        "Tags": [
          {
            "Key": "Name",
            "Value": "private"
          }
        ]
      }
    },
    "PrivateRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "private"
          }
        ]
      }
    },
    "PrivateSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet"
        },
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        }
      }
    },
    "PrivateRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "NATDevice"
        }
      }
    },
    "PrivateNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "private"
          }
        ]
      }
    },
    "InboundPrivateNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "OutBoundPrivateNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "PrivateSubnetNetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet"
        },
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl"
        }
      }
    },
    "NATIPAddress": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "NATDevice": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "NATIPAddress",
            "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "PublicSubnet"
        }
      }
    },
    "FrontendFleet": {
      "Type": "AWS::EC2::Instance",
      "DependsOn": "GatewayToInternet",
      "Properties": {
        "ImageId": "ami-d0f506b0",
        "InstanceType": {
          "Ref": "FrontendInstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "NetworkInterfaces": [
          {
            "GroupSet": [
              {
                "Ref": "FrontendSecurityGroup"
              }
            ],
            "AssociatePublicIpAddress": true,
            "DeviceIndex": "0",
            "DeleteOnTermination": true,
            "SubnetId": {
              "Ref": "PublicSubnet"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "\n",
                "\n",
                "# START 10-update_os.sh\n",
                "\n",
                "yum update -y\n",
                "\n",
                "# Install general dependencies that are needed before Chef is bootstrapped\n",
                "yum -y install git jq\n",
                "\n",
                "# END 10-update_os.sh\n",
                "\n",
                "\n",
                "# START 20-environment_variables.sh\n",
                "\n",
                "\n",
                "export INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)\n",
                "\n",
                "# END 20-environment_variables.sh\n",
                "\n",
                "\n",
                "# START 30-install_chef.sh\n",
                "\n",
                "# Using chef-dk\n",
                "rpm -ivh https://packages.chef.io/stable/el/6/chefdk-0.14.25-1.el6.x86_64.rpm\n",
                "\n",
                "# Using chef-client\n",
                "#export CHEF_VERSION=\"12.10.24\"\n",
                "#curl -LO https://omnitruck.chef.io/install.sh && sudo bash ./install.sh -v $CHEF_VERSION && rm -f install.sh\n",
                "\n",
                "# Pull down the application cookbook from GitHub\n",
                "export HOME=/root/\n",
                "mkdir -p /etc/chef/\n",
                "cd /tmp/\n",
                "git clone https://github.com/andyboutte/cms-deployment.git\n",
                "mv cms-deployment/chef/* /etc/chef/\n",
                "\n",
                "cat <<EOF > /etc/chef/client.rb\n",
                "log_level       :info\n",
                "log_location    \"/var/log/chef-client.log\"\n",
                "node_name       \"$INSTANCE_ID\"\n",
                "chef_repo_path  \"/etc/chef/\"\n",
                "cookbook_path   \"/etc/chef/cookbooks/\"\n",
                "data_bag_path   \"/etc/chef/databags/\"\n",
                "environment     \"",
                {
                  "Ref": "Environment"
                },
                "\"\n",
                "local_mode      true\n",
                "json_attribs    \"/etc/chef/json_attributes.json\"\n",
                "EOF\n",
                "\n",
                "# Create the json attributes file to define the run list and cloudformation parameters\n",
                "cat <<EOF > /etc/chef/json_attributes.json\n",
                "{\n",
                "  \"run_list\": [\n",
                "    \"cms-rean\"\n",
                "  ],\n",
                "  \"cloud\": {\n",
                "    \"application\": \"",
                {
                  "Ref": "Application"
                },
                "\",\n",
                "    \"hostname\": \"",
                {
                  "Ref": "Hostname"
                },
                "\",\n",
                "    \"mysql\": {\n",
                "      \"root_user_password\": \"",
                {
                  "Ref": "DBRootPassword"
                },
                "\",\n",
                "      \"cms_user_password\": \"",
                {
                  "Ref": "DBCMSPassword"
                },
                "\"\n",
                "    },\n",
                "    \"cms\": {\n",
                "      \"admin_user_password\": \"",
                {
                  "Ref": "CMSAdminPassword"
                },
                "\",\n",
                "      \"admin_user_email\": \"",
                {
                  "Ref": "CMSAdminEmail"
                },
                "\"\n",
                "    }\n",
                "  }\n",
                "}\n",
                "EOF\n",
                "\n",
                "# Pull down all the dependency cookbooks\n",
                "cd /etc/chef/cookbooks/cms-rean\n",
                "/usr/bin/berks vendor /etc/chef/cookbooks/\n",
                "\n",
                "# Run chef\n",
                "chef-client\n",
                "\n",
                "# END 30-install_chef.sh\n",
                "\n",
                "\n",
                "# START 99-end.sh\n",
                "\n",
                "/opt/aws/bin/cfn-signal -e $? '",
                {
                  "Ref": "FrontendWaitHandle"
                },
                "'\n",
                "\n",
                "# END 99-end.sh\n",
                "\n"
              ]
            ]
          }
        }
      }
    },
    "FrontendSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "EC2 security group",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "SSHLocation"
            }
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "25",
            "ToPort": "25",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "FrontendWaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle"
    },
    "FrontendWaitCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "FrontendFleet",
      "Properties": {
        "Handle": {
          "Ref": "FrontendWaitHandle"
        },
        "Timeout": "300",
        "Count": 1
      }
    }
  }
}
